@model DrywallCalculator.ViewModels.DrywallCreateViewModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<form asp-action="Index" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Drywall.Length" class="control-label"></label>
                <input asp-for="Drywall.Length" class="form-control" />
                <span asp-validation-for="Drywall.Length" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Drywall.WallTypeId" class="control-label">Typ ściany</label>
                <select asp-for="Drywall.WallTypeId" class ="form-control" asp-items="@Model.WallTypeList" class="form-select">
                    <option disabled selected>--Typ ściany--</option>
                </select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Drywall.WallType)
                
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Drywall.Length)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Drywalls != null){
            @foreach (var item in Model.Drywalls) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.WallType.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Length)
            </td>
            <td>
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
        }

    </tbody>
</table>
